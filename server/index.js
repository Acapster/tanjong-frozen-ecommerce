const express = require('express');\nconst http = require('http');\nconst socketIo = require('socket.io');\nconst cors = require('cors');\nconst rateLimit = require('express-rate-limit');\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIo(server, {\n  cors: {\n    origin: process.env.CLIENT_URL || \"http://localhost:3000\",\n    methods: [\"GET\", \"POST\"]\n  }\n});\n\nconst PORT = process.env.PORT || 3001;\n\n// Middleware\napp.use(cors());\napp.use(express.json());\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100 // limit each IP to 100 requests per windowMs\n});\napp.use(limiter);\n\n// Basic route\napp.get('/', (req, res) => {\n  res.json({ message: 'Tanjong Frozen WebSocket Server is running!' });\n});\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.json({ \n    status: 'OK', \n    timestamp: new Date().toISOString(),\n    uptime: process.uptime()\n  });\n});\n\n// Socket.IO connection handling\nio.on('connection', (socket) => {\n  console.log('New client connected:', socket.id);\n\n  // Handle order tracking\n  socket.on('join-order-room', (orderId) => {\n    socket.join(`order-${orderId}`);\n    console.log(`Client ${socket.id} joined order room: ${orderId}`);\n  });\n\n  // Handle order status updates\n  socket.on('order-status-update', (data) => {\n    const { orderId, status, location } = data;\n    io.to(`order-${orderId}`).emit('order-updated', {\n      orderId,\n      status,\n      location,\n      timestamp: new Date().toISOString()\n    });\n    console.log(`Order ${orderId} status updated:`, status);\n  });\n\n  // Handle driver location updates\n  socket.on('driver-location-update', (data) => {\n    const { orderId, latitude, longitude } = data;\n    io.to(`order-${orderId}`).emit('driver-location', {\n      orderId,\n      location: { latitude, longitude },\n      timestamp: new Date().toISOString()\n    });\n  });\n\n  // Handle admin notifications\n  socket.on('admin-notification', (data) => {\n    io.emit('notification', {\n      ...data,\n      timestamp: new Date().toISOString()\n    });\n    console.log('Admin notification sent:', data.message);\n  });\n\n  // Handle disconnection\n  socket.on('disconnect', () => {\n    console.log('Client disconnected:', socket.id);\n  });\n\n  // Handle errors\n  socket.on('error', (error) => {\n    console.error('Socket error:', error);\n  });\n});\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).json({ error: 'Something went wrong!' });\n});\n\n// Start server\nserver.listen(PORT, () => {\n  console.log(`🚀 Tanjong Frozen WebSocket Server running on port ${PORT}`);\n  console.log(`📡 Socket.IO server ready for connections`);\n  console.log(`🌐 CORS enabled for: ${process.env.CLIENT_URL || 'http://localhost:3000'}`);\n});\n\n// Graceful shutdown\nprocess.on('SIGTERM', () => {\n  console.log('SIGTERM received, shutting down gracefully');\n  server.close(() => {\n    console.log('Server closed');\n    process.exit(0);\n  });\n});\n\nprocess.on('SIGINT', () => {\n  console.log('SIGINT received, shutting down gracefully');\n  server.close(() => {\n    console.log('Server closed');\n    process.exit(0);\n  });\n});"